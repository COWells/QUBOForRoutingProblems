from typing import List, Tuple
from GraphDataStructure import Graph


def runNearestNeighbourTSP(graph: Graph, startingNode: int = 0) -> Tuple[List[int], int]:
    """
    Runs the nearest neighbour TSP algorithm on our graph
    :param graph: Uses our custom Graph class which contains the adjacency matrix
    :param startingNode: Our starting (and ending) node
    :return: A tuple containing the path generated by the algorithm, and the length of this path
    """
    distance = 0
    numberOfNodes = graph.size
    currentNode = startingNode
    visitedNodes = [startingNode]

    while len(visitedNodes) < numberOfNodes:
        # Creates an index, value dictionary for each edge of the current node.
        indexDict = dict()
        for i in range(len(graph.adjMatrix[currentNode])):
            indexDict[i] = int(graph.adjMatrix[currentNode][i])

        # Sorts the dictionary such that the values are in ascending order.
        # This means that the closest neighbour is the first element of the dictionary.
        indexDict = sorted(indexDict.items(), key=lambda x: x[1])

        for pair in indexDict:
            # Visit the node if we haven't visited it, otherwise check the next closest neighbour.
            if pair[0] not in visitedNodes:
                currentNode = pair[0]
                visitedNodes.append(pair[0])
                distance += pair[1]
                break

    # Manually add the distance: returning from our last node back to our starting node.
    distance += graph.adjMatrix[currentNode][startingNode]
    visitedNodes.append(startingNode)
    return visitedNodes, distance